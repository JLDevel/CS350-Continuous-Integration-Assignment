/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.5.1/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:31.0.1-jre'
}

application {
    // Define the main class for the application.
    mainClass = 'assignment.App'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

task copyDocs (type: Copy){
    from(file('build/docs/'))
    into(file('build/reports/'))
}

task copyReports (type: Copy){
    from(file('src/main/html/'))
    into(file('build/reports/'))
}

task reports (dependsOn: ['build', 'run', 'copyDocs', 'copyReports'])

////////  Website publication on GitHub pages ///////////////////


def websiteRepo='https://github.com/JLDevel/CS350-Assignment-Website-Repository.git'

task clearPages(type: Delete) {
    delete 'build/gh-pages'
}

task clonePages(dependsOn: ['clearPages']) {
    doLast {
        exec {
            workingDir = '.'
            commandLine = ['git', 'clone', websiteRepo, 'build/gh-pages']
        }
    }
}


task copyWebsite (dependsOn: ['reports', 'clonePages']) {
    doLast {
        ant.copy (todir: 'build/gh-pages') {
            fileset(dir: 'build/reports')
        }
    }
}



task updateGHPages (dependsOn: ['copyWebsite', 'defineUser']) {
    group = "Reporting"
    description  'Copies reports to the website repo and pushes to GitHub'
    doLast {
        def pagesDir = "$buildDir/gh-pages"
        exec {
            workingDir = 'build/gh-pages'
            commandLine = ['git', 'add', '.']
        }
        exec {
            workingDir = 'build/gh-pages'
            commandLine = ['git', 'commit', '-m', 'Updating-webpages']
        }
        exec {
            workingDir = 'build/gh-pages'
            commandLine = ['git', 'push']
        }
    }
}

task defineUser {
    description 'sets user email and name for git commands'
    doLast{
        exec{
            workingDir = 'build/gh-pages'
            commandLine = ['git', 'config', 'user.email', "jl_devel@outlook.com"]
        }
        exec{
            workingDir = 'build/gh-pages'
            commandLine = ['git', 'config', 'user.name', "jl_devel@outlook.com"]
        }
    }
}

task deployReports (dependsOn: 'updateGHPages')
deployReports.doLast {
    println 'reports deployed'
}
